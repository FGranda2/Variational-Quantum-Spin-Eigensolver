HAMILTONIAN: PauliTerm[] = [
  PauliTerm {
    pauli=[
      Pauli::X,
      Pauli::X,
      Pauli::I,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::Y,
      Pauli::Y,
      Pauli::I,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::Z,
      Pauli::Z,
      Pauli::I,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::X,
      Pauli::X,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::Y,
      Pauli::Y,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::Z,
      Pauli::Z,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::I,
      Pauli::X,
      Pauli::X
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::I,
      Pauli::Y,
      Pauli::Y
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::I,
      Pauli::Z,
      Pauli::Z
    ],
    coefficient=1
  }
];

INITIAL_POINT: real[] = [
  1.2977,
  1.2281,
  1.1464,
  0.9772,
  (-0.8275),
  1.2256,
  0.832,
  (-1.4781),
  (-0.3399),
  1.0499,
  0.8422,
  0.7743,
  (-0.3382),
  1.4659,
  (-0.9573),
  1.5364,
  (-1.1539),
  (-0.3438),
  (-1.5166),
  0.475,
  (-0.4578),
  0.7836,
  0.2746,
  (-0.7119),
  (-1.3792),
  0.8478,
  (-1.2363),
  0.2242,
  0.4273,
  (-0.908),
  (-0.7524),
  (-0.9446),
  (-0.5713),
  (-0.6749),
  (-1.3463),
  (-0.8881),
  0.4129,
  (-0.2566),
  1.1938,
  0.9031,
  (-0.5696),
  (-0.5753),
  0.0889,
  (-0.9168),
  (-0.5563)
];

qfunc Init(q: qbit[]) {
  X(q[0]);
  X(q[1]);
  X(q[2]);
  X(q[3]);
  hadamard_transform(q[0]);
  CX(q[0], q[1]);
  hadamard_transform(q[2]);
  CX(q[2], q[3]);
}

qfunc N_block(q0: qbit, q1: qbit, layer: real) {
  RZ(1.5708, q1);
  CX(q1, q0);
  RZ((2 * layer) - 1.5708, q0);
  RY(1.5708 - (2 * layer), q1);
  CX(q0, q1);
  RY((2 * layer) - 1.5708, q1);
  CX(q1, q0);
  RZ(-1.5708, q0);
}

qfunc Stot_conserving_layer(q: qbit[], params: real[]) {
  N_block(q[0], q[1], params[0]);
  N_block(q[2], q[3], params[1]);
  N_block(q[1], q[2], params[2]);
}

qfunc main(output q: qbit[], p: real[45]) {
  allocate(4, q);
  Init(q);
  Stot_conserving_layer(q, p[0:3]);
  Stot_conserving_layer(q, p[3:6]);
  Stot_conserving_layer(q, p[6:9]);
  Stot_conserving_layer(q, p[9:12]);
  Stot_conserving_layer(q, p[12:15]);
  Stot_conserving_layer(q, p[15:18]);
  Stot_conserving_layer(q, p[18:21]);
  Stot_conserving_layer(q, p[21:24]);
  Stot_conserving_layer(q, p[24:27]);
  Stot_conserving_layer(q, p[27:30]);
  Stot_conserving_layer(q, p[30:33]);
  Stot_conserving_layer(q, p[33:36]);
  Stot_conserving_layer(q, p[36:39]);
  Stot_conserving_layer(q, p[39:42]);
  Stot_conserving_layer(q, p[42:45]);
}

cscope ```
res = vqe(hamiltonian=HAMILTONIAN, maximize=False, initial_point=INITIAL_POINT, optimizer=Optimizer.COBYLA, max_iteration=5000, tolerance=1e-06, step_size=0, skip_compute_variance=False, alpha_cvar=1)
save({'result': res})
```
