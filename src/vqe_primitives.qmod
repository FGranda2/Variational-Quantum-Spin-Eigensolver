HAMILTONIAN: PauliTerm[] = [
  PauliTerm {
    pauli=[
      Pauli::X,
      Pauli::X,
      Pauli::I,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::Y,
      Pauli::Y,
      Pauli::I,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::Z,
      Pauli::Z,
      Pauli::I,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::X,
      Pauli::X,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::Y,
      Pauli::Y,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::Z,
      Pauli::Z,
      Pauli::I
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::I,
      Pauli::X,
      Pauli::X
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::I,
      Pauli::Y,
      Pauli::Y
    ],
    coefficient=1
  },
  PauliTerm {
    pauli=[
      Pauli::I,
      Pauli::I,
      Pauli::Z,
      Pauli::Z
    ],
    coefficient=1
  }
];

INITIAL_POINT: real[] = [
  1.0691,
  (-1.3511),
  (-0.6382),
  0.5408,
  1.5394,
  0.5942,
  (-0.7587),
  1.1544,
  (-0.5706),
  0.4041,
  (-0.5477),
  (-0.5251),
  (-1.3265),
  (-0.7827),
  1.3868,
  1.1839,
  1.5196,
  (-0.9521),
  (-0.7332),
  0.662,
  (-0.9061),
  (-1.4977),
  0.7495,
  (-1.1997),
  (-0.1857),
  (-0.2221),
  1.1577,
  0.8008,
  (-0.2166),
  (-1.2358),
  0.9395,
  (-0.4481),
  (-0.7015),
  (-0.4758),
  1.0898,
  0.2593,
  (-0.4154),
  (-0.101),
  1.1319,
  0.1236
];

qfunc hw_efficient_layer(q: qbit[], params: real[]) {
  RY(params[0], q[0]);
  RY(params[1], q[1]);
  RY(params[2], q[2]);
  RY(params[3], q[3]);
  RZ(params[4], q[0]);
  RZ(params[5], q[1]);
  RZ(params[6], q[2]);
  RZ(params[7], q[3]);
  hadamard_transform(q[1]);
  CX(q[0], q[1]);
  hadamard_transform(q[1]);
  hadamard_transform(q[2]);
  CX(q[1], q[2]);
  hadamard_transform(q[2]);
  hadamard_transform(q[3]);
  CX(q[2], q[3]);
  hadamard_transform(q[3]);
}

qfunc main(output q: qbit[], p: real[40]) {
  allocate(4, q);
  X(q[1]);
  X(q[3]);
  hw_efficient_layer(q, p[0:8]);
  hw_efficient_layer(q, p[8:16]);
  hw_efficient_layer(q, p[16:24]);
  hw_efficient_layer(q, p[24:32]);
  hw_efficient_layer(q, p[32:40]);
}

cscope ```
res = vqe(hamiltonian=HAMILTONIAN, maximize=False, initial_point=INITIAL_POINT, optimizer=Optimizer.NELDER_MEAD, max_iteration=10000, tolerance=1e-10, step_size=0, skip_compute_variance=False, alpha_cvar=1)
save({'result': res})
```
